import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
}

ext.kotlin_version = '1.3.61'
ext.plugin_path = '' //Put your plugins folder directory here! If it is left as '', jars won't be copied

group = 'com.derongan.minecraft'
version = plugin_version + "-SNAPSHOT"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/groups/public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven { url 'https://erethon.de/repo/' } //HeadLib
    mavenLocal()
    jcenter()
    maven { url 'https://jitpack.io' } //JitPack
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.15-R0.1-SNAPSHOT'
    compileOnly project(':DeeperWorld')
    implementation project(':idofront')
    implementation 'de.erethon:headlib:3.0.2'
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7'

    if (useLocalGuiy.toBoolean())
        implementation project(':guiy')
    else
        implementation 'com.github.Mineinabyss:guiy:master-SNAPSHOT'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [plugin_version: plugin_version]
    }
}

shadowJar {
    getArchiveClassifier().set(null)
    minimize {
        exclude(dependency("org.jetbrains.kotlin:.*"))
        exclude(dependency('de.erethon:headlib:3.0.2'))
    }
}
build.dependsOn shadowJar

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

//Move into plugins folder
if (plugin_path != '') {
    task copyJar(type: Copy) {
        from shadowJar // here it automatically reads jar file produced from jar task
        into plugin_path
    }
    build.dependsOn copyJar
} else println("Skipped copyJar")
